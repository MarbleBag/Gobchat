/*******************************************************************************
 * Copyright (C) 2019-2022 MarbleBag
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 *******************************************************************************/

'use strict'; 

import * as Databinding from '/module/Databinding'
import * as Config from '/module/Config'
import * as Locale from '/module/Locale'
import * as Style from '/module/Style'
import * as Dialog from '/module/Dialog'
import * as NavControl from '/module/MenuNavigationComponent'

//import '/module/WebComponents'

// initialize global variables
jQuery(async function () {
    window.gobConfig = new Config.GobchatConfig()
    window.gobConfig.loadFromLocalStore(true)

    window.gobLocale = new Locale.LocaleManager()

    window.gobStyles = new Style.StyleLoader("..")
    await gobStyles.initialize()

    const binding = new Databinding.BindingContext(gobConfig)

    // update all text on language change
    gobLocale.setLocale(gobConfig.get("behaviour.language"))
    binding.bindConfigListener("behaviour.language", (value) => {
        gobLocale.setLocale(value)
        gobLocale.updateElement($(document))
    })

    binding.bindConfigListener("style.theme", async (value) => {
        try {
            await gobStyles.activateStyles(value, $("#gob_autogenerated_stylesheet"), "before")
        } catch (e1) {
            console.error(e1)
            await gobStyles.activateStyles()
        }
    })

    binding.bindConfigListener("style", (value) => {
        try {
            Style.StyleBuilder.generateAndSetCssRules("gob_autogenerated_stylesheet")
        } catch (e1) {
            console.error(e1)
        }
    })

    await NavControl.makeControl($(".gob-config-navigation"))

    binding.initialize()

    const mutationObserver = new window.MutationObserver((mutations, observer) => {
        for (let mutation of mutations) {
            let updateElement = false
            
            if (mutation.type === 'attributes')
                updateElement = mutation.attributeName === Locale.AttributeTextKey || mutation.attributeName === Locale.AttributeTooltipKey            

            if (updateElement && mutation.target instanceof HTMLElement)
                gobLocale.updateElement(mutation.target)
        }
    })

    mutationObserver.observe(document.body, { childList: false, subtree: true, attributes: true })

    // initialize main buttons

    $("#c_main_save-config").on("click", function () {
        window.gobConfig.saveToLocalStore()
        window.saveConfig()
    })

    $("#c_main_save-and-exit-config").on("click", function () {
        window.gobConfig.saveToLocalStore()
        window.saveConfig()
        window.close()
    })

    $("#c_main_cancel-config").on("click", async function () {
        const result = await Dialog.showConfirmationDialog({ dialogText: "config.main.nav.cancel.dialog" })
        if (result)
            window.close()
    })

    $("#c_main_close-gobchat").on("click", async function () {
        const result = await Dialog.showConfirmationDialog({ dialogText: "config.main.nav.closegobchat.dialog" })
        if (result) {
            window.close()
            GobchatAPI.closeGobchat()
        }
    })
})