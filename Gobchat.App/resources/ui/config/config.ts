/*******************************************************************************
 * Copyright (C) 2019-2025 MarbleBag
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 *******************************************************************************/

'use strict';

import "/module/JQueryExtensions"
import * as Databinding from '/module/Databinding'
import * as Config from '/module/Config'
import * as Locale from '/module/Locale'
import * as Style from '/module/Style'
import * as Dialog from '/module/Dialog'
import * as NavControl from '/module/MenuNavigationComponent'

//import '/module/WebComponents'

// initialize global variables
window.gobConfig = new Config.GobchatConfig()
window.gobConfig.loadFromLocalStore(true)

window.gobLocale = new Locale.LocaleManager()

window.gobStyles = new Style.StyleLoader("..")
await gobStyles.initialize()
{
    const configBinding = new Databinding.BindingContext(window.opener.gobConfig)
    configBinding.bindCallback("behaviour.frame.chat.position.x", value => gobConfig.set("behaviour.frame.chat.position.x", value))
    configBinding.bindCallback("behaviour.frame.chat.position.y", value => gobConfig.set("behaviour.frame.chat.position.y", value))
    configBinding.bindCallback("behaviour.frame.chat.size.width", value => gobConfig.set("behaviour.frame.chat.size.width", value))
    configBinding.bindCallback("behaviour.frame.chat.size.height", value => gobConfig.set("behaviour.frame.chat.size.height", value))
    configBinding.loadBindings()

    $(window).on("beforeunload", function () {
        configBinding.clearBindings()
    })
}


const binding = new Databinding.BindingContext(gobConfig)

// update all text on language change
gobLocale.setLocale(gobConfig.get("behaviour.language"))
binding.bindCallback("behaviour.language", (value) => {
    gobLocale.setLocale(value)
    gobLocale.updateElement($(document))
})

binding.bindCallback("style.theme", async (value) => {
    try {
        await gobStyles.activateStyles(value, $("#gob_autogenerated_stylesheet"), "before")
    } catch (e1) {
        console.error(e1)
        await gobStyles.activateStyles()
    }
})

binding.bindCallback("style", (value) => {
    try {
        Style.StyleBuilder.generateAndSetCssRules("gob_autogenerated_stylesheet")
    } catch (e1) {
        console.error(e1)
    }
})

const selProfile = $("#cp-main_profile-select")
selProfile.on("change", (event) => {
    const profileId = event.target.value as string
    gobConfig.activeProfileId = profileId
})

function populateProfileSelection() {
    selProfile.empty()

    gobConfig.profileIds
        .map(profileId => {
            var profile = gobConfig.getProfile(profileId) as Config.ConfigProfile
            return { name: profile.profileName, id: profileId }
        })
        .sort((a, b) => {
            if (a.name < b.name)
                return -1;
            if (a.name > b.name)
                return 1;
            return 0;
        })
        .forEach(e => {
            selProfile.append(new Option(e.name, e.id))
        })

    selProfile.val(gobConfig.activeProfileId)
}

gobConfig.addProfileEventListener((event) => {
    if (event.action === "active")
        selProfile.val(event.newProfileId)
    else
        populateProfileSelection()
})

gobConfig.addPropertyEventListener("profile.name", () => {
    const profileId = selProfile.val()
    populateProfileSelection()
    selProfile.val(profileId) // restore old selection
})

populateProfileSelection()

const mutationObserver = new window.MutationObserver((mutations, observer) => {
    for (const mutation of mutations) {
        let updateElement = false

        if (mutation.type === 'attributes')
            updateElement = mutation.attributeName === Locale.HtmlAttribute.TextId || mutation.attributeName === Locale.HtmlAttribute.TooltipId

        if (updateElement && mutation.target instanceof HTMLElement) {
            const target = mutation.target
            if (target.getAttribute(Locale.HtmlAttribute.ActiveLocale) !== gobLocale.locale)
                gobLocale.updateElement(target)
        }
            
    }
})

mutationObserver.observe(document.body, { childList: false, subtree: true, attributes: true })

await NavControl.makeControl($(".gob-config-navigation"))

binding.loadBindings()

// initialize main buttons

$("#cp-main_save-config").on("click", function () {
    window.gobConfig.saveToLocalStore()
    window.saveConfig()
})

$("#cp-main_save-and-exit-config").on("click", function () {
    window.gobConfig.saveToLocalStore()
    window.saveConfig()
    window.close()
})

$("#cp-main_cancel-config").on("click", async function () {
    const result = await Dialog.showConfirmationDialog({ dialogText: "config.main.nav.cancel.dialog" })
    if (result)
        window.close()
})

$("#cp-main_close-gobchat").on("click", async function () {
    const result = await Dialog.showConfirmationDialog({ dialogText: "config.main.nav.closegobchat.dialog" })
    if (result) {
        window.close()
        GobchatAPI.closeGobchat()
    }
})